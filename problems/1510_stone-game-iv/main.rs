struct Solution;

use std::collections::HashMap;

impl Solution {
    pub fn winner_square_game(n: i32) -> bool {
        let square_num_exists: HashMap<i32, bool> = vec![
            (1, true),
            (4, true),
            (9, true),
            (16, true),
            (25, true),
            (36, true),
            (49, true),
            (64, true),
            (81, true),
            (100, true),
            (121, true),
            (144, true),
            (169, true),
            (196, true),
            (225, true),
            (256, true),
            (289, true),
            (324, true),
            (361, true),
            (400, true),
            (441, true),
            (484, true),
            (529, true),
            (576, true),
            (625, true),
            (676, true),
            (729, true),
            (784, true),
            (841, true),
            (900, true),
            (961, true),
            (1024, true),
            (1089, true),
            (1156, true),
            (1225, true),
            (1296, true),
            (1369, true),
            (1444, true),
            (1521, true),
            (1600, true),
            (1681, true),
            (1764, true),
            (1849, true),
            (1936, true),
            (2025, true),
            (2116, true),
            (2209, true),
            (2304, true),
            (2401, true),
            (2500, true),
            (2601, true),
            (2704, true),
            (2809, true),
            (2916, true),
            (3025, true),
            (3136, true),
            (3249, true),
            (3364, true),
            (3481, true),
            (3600, true),
            (3721, true),
            (3844, true),
            (3969, true),
            (4096, true),
            (4225, true),
            (4356, true),
            (4489, true),
            (4624, true),
            (4761, true),
            (4900, true),
            (5041, true),
            (5184, true),
            (5329, true),
            (5476, true),
            (5625, true),
            (5776, true),
            (5929, true),
            (6084, true),
            (6241, true),
            (6400, true),
            (6561, true),
            (6724, true),
            (6889, true),
            (7056, true),
            (7225, true),
            (7396, true),
            (7569, true),
            (7744, true),
            (7921, true),
            (8100, true),
            (8281, true),
            (8464, true),
            (8649, true),
            (8836, true),
            (9025, true),
            (9216, true),
            (9409, true),
            (9604, true),
            (9801, true),
            (10000, true),
            (10201, true),
            (10404, true),
            (10609, true),
            (10816, true),
            (11025, true),
            (11236, true),
            (11449, true),
            (11664, true),
            (11881, true),
            (12100, true),
            (12321, true),
            (12544, true),
            (12769, true),
            (12996, true),
            (13225, true),
            (13456, true),
            (13689, true),
            (13924, true),
            (14161, true),
            (14400, true),
            (14641, true),
            (14884, true),
            (15129, true),
            (15376, true),
            (15625, true),
            (15876, true),
            (16129, true),
            (16384, true),
            (16641, true),
            (16900, true),
            (17161, true),
            (17424, true),
            (17689, true),
            (17956, true),
            (18225, true),
            (18496, true),
            (18769, true),
            (19044, true),
            (19321, true),
            (19600, true),
            (19881, true),
            (20164, true),
            (20449, true),
            (20736, true),
            (21025, true),
            (21316, true),
            (21609, true),
            (21904, true),
            (22201, true),
            (22500, true),
            (22801, true),
            (23104, true),
            (23409, true),
            (23716, true),
            (24025, true),
            (24336, true),
            (24649, true),
            (24964, true),
            (25281, true),
            (25600, true),
            (25921, true),
            (26244, true),
            (26569, true),
            (26896, true),
            (27225, true),
            (27556, true),
            (27889, true),
            (28224, true),
            (28561, true),
            (28900, true),
            (29241, true),
            (29584, true),
            (29929, true),
            (30276, true),
            (30625, true),
            (30976, true),
            (31329, true),
            (31684, true),
            (32041, true),
            (32400, true),
            (32761, true),
            (33124, true),
            (33489, true),
            (33856, true),
            (34225, true),
            (34596, true),
            (34969, true),
            (35344, true),
            (35721, true),
            (36100, true),
            (36481, true),
            (36864, true),
            (37249, true),
            (37636, true),
            (38025, true),
            (38416, true),
            (38809, true),
            (39204, true),
            (39601, true),
            (40000, true),
            (40401, true),
            (40804, true),
            (41209, true),
            (41616, true),
            (42025, true),
            (42436, true),
            (42849, true),
            (43264, true),
            (43681, true),
            (44100, true),
            (44521, true),
            (44944, true),
            (45369, true),
            (45796, true),
            (46225, true),
            (46656, true),
            (47089, true),
            (47524, true),
            (47961, true),
            (48400, true),
            (48841, true),
            (49284, true),
            (49729, true),
            (50176, true),
            (50625, true),
            (51076, true),
            (51529, true),
            (51984, true),
            (52441, true),
            (52900, true),
            (53361, true),
            (53824, true),
            (54289, true),
            (54756, true),
            (55225, true),
            (55696, true),
            (56169, true),
            (56644, true),
            (57121, true),
            (57600, true),
            (58081, true),
            (58564, true),
            (59049, true),
            (59536, true),
            (60025, true),
            (60516, true),
            (61009, true),
            (61504, true),
            (62001, true),
            (62500, true),
            (63001, true),
            (63504, true),
            (64009, true),
            (64516, true),
            (65025, true),
            (65536, true),
            (66049, true),
            (66564, true),
            (67081, true),
            (67600, true),
            (68121, true),
            (68644, true),
            (69169, true),
            (69696, true),
            (70225, true),
            (70756, true),
            (71289, true),
            (71824, true),
            (72361, true),
            (72900, true),
            (73441, true),
            (73984, true),
            (74529, true),
            (75076, true),
            (75625, true),
            (76176, true),
            (76729, true),
            (77284, true),
            (77841, true),
            (78400, true),
            (78961, true),
            (79524, true),
            (80089, true),
            (80656, true),
            (81225, true),
            (81796, true),
            (82369, true),
            (82944, true),
            (83521, true),
            (84100, true),
            (84681, true),
            (85264, true),
            (85849, true),
            (86436, true),
            (87025, true),
            (87616, true),
            (88209, true),
            (88804, true),
            (89401, true),
            (90000, true),
            (90601, true),
            (91204, true),
            (91809, true),
            (92416, true),
            (93025, true),
            (93636, true),
            (94249, true),
            (94864, true),
            (95481, true),
            (96100, true),
            (96721, true),
            (97344, true),
            (97969, true),
            (98596, true),
            (99225, true),
            (99856, true),
        ]
        .into_iter()
        .collect();
        let square_nums: Vec<i32> = vec![
            1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400,
            441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296,
            1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500,
            2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096,
            4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084,
            6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464,
            8649, 8836, 9025, 9216, 9409, 9604, 9801, 10000, 10201, 10404, 10609, 10816, 11025,
            11236, 11449, 11664, 11881, 12100, 12321, 12544, 12769, 12996, 13225, 13456, 13689,
            13924, 14161, 14400, 14641, 14884, 15129, 15376, 15625, 15876, 16129, 16384, 16641,
            16900, 17161, 17424, 17689, 17956, 18225, 18496, 18769, 19044, 19321, 19600, 19881,
            20164, 20449, 20736, 21025, 21316, 21609, 21904, 22201, 22500, 22801, 23104, 23409,
            23716, 24025, 24336, 24649, 24964, 25281, 25600, 25921, 26244, 26569, 26896, 27225,
            27556, 27889, 28224, 28561, 28900, 29241, 29584, 29929, 30276, 30625, 30976, 31329,
            31684, 32041, 32400, 32761, 33124, 33489, 33856, 34225, 34596, 34969, 35344, 35721,
            36100, 36481, 36864, 37249, 37636, 38025, 38416, 38809, 39204, 39601, 40000, 40401,
            40804, 41209, 41616, 42025, 42436, 42849, 43264, 43681, 44100, 44521, 44944, 45369,
            45796, 46225, 46656, 47089, 47524, 47961, 48400, 48841, 49284, 49729, 50176, 50625,
            51076, 51529, 51984, 52441, 52900, 53361, 53824, 54289, 54756, 55225, 55696, 56169,
            56644, 57121, 57600, 58081, 58564, 59049, 59536, 60025, 60516, 61009, 61504, 62001,
            62500, 63001, 63504, 64009, 64516, 65025, 65536, 66049, 66564, 67081, 67600, 68121,
            68644, 69169, 69696, 70225, 70756, 71289, 71824, 72361, 72900, 73441, 73984, 74529,
            75076, 75625, 76176, 76729, 77284, 77841, 78400, 78961, 79524, 80089, 80656, 81225,
            81796, 82369, 82944, 83521, 84100, 84681, 85264, 85849, 86436, 87025, 87616, 88209,
            88804, 89401, 90000, 90601, 91204, 91809, 92416, 93025, 93636, 94249, 94864, 95481,
            96100, 96721, 97344, 97969, 98596, 99225, 99856,
        ];

        if square_num_exists.contains_key(&n) {
            return true;
        }

        let mut dp: HashMap<i32, bool> = HashMap::new();
        dp.insert(1, true);
        for i in 2..n + 1 {
            if square_num_exists.contains_key(&i) {
                dp.insert(i, true);
                continue;
            }

            let mut can_win = false;
            for num in square_nums.iter() {
                if num > &i {
                    break;
                }

                match dp.get(&(i - num)) {
                    None => continue,
                    Some(val) => {
                        if !val {
                            can_win = true;
                            break;
                        }
                    }
                }
            }

            dp.insert(i, can_win);
        }

        *dp.get(&n).unwrap()
    }
}

fn main() {
    println!("{}", Solution::winner_square_game(1));
    println!("{}", Solution::winner_square_game(2));
    println!("{}", Solution::winner_square_game(3));
    println!("{}", Solution::winner_square_game(5));
    println!("{}", Solution::winner_square_game(10));
    println!("Hello, world!");
}
